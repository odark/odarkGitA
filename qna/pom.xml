<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.odark</groupId>
	<artifactId>qna</artifactId>
	<version>1.0</version>
	<packaging>war</packaging>

	<!-- 라이브러리 버전업시 빠르게 하고 중복제거하기위해 -->
	<properties>
		<h2.database.version>1.4.191</h2.database.version>
		<org.springframework.version>4.0.5.RELEASE</org.springframework.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- 테이블스키마가 존재하는 sql파일을 통해 dao클래스 생성을 위한 라이브러리 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- junit annotaion import를 위한 클래스들이 들어있다. -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>

		<!-- logback-classic 만 추가해도 의존된 logback-core도 자동 추가됨 -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.13</version>
		</dependency>
		<!-- Form Validation using Annotations -->
		<!-- <dependency> <groupId>javax.validation</groupId> <artifactId>validation-api</artifactId> 
			<version>1.1.0.Final</version> </dependency> -->
		<!-- 위의 표준을 구현한 하이버네이트 구현체까지 필요하다. 위의 javax-validation 은 의존성으로 빼도 된다. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.2.4.Final</version>
		</dependency>

		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>2.2.4</version>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>javax.el</artifactId>
			<version>2.2.4</version>
		</dependency>

		<!-- jstl 태그라이브러리 사용 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
			<scope>runtime</scope>
		</dependency>
		<!-- java-servlet 라이브러리는 tomcat 웹어플리케이션에서 기본적으로 제공하는 라이브러리니까 provided scope옵션설정 -->
		<!-- 나중에 war파일 묶을때 같이 lib폴더에 포함되지 않음 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- h2 database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.database.version}</version>
		</dependency>

		<!-- connection pooling 을 아파치에서 제공하는 라이브러리 사용 -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.2.2</version>
		</dependency>

		<!-- test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
		</dependency>

		<!-- Mybatis 라이브러리 추가 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.1</version>
		</dependency>

		<!-- Mybatis, Spring연동 라이브러리 추가 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency>



	</dependencies>
	<build>
		<finalName>qna</finalName>

		<!-- maven은 java폴더안에 소스들은 모두 자바파일로 인식하여 컴파일한다. 따라서 안에있는 xml 파일이 실제 target디렉토리로 
			복사가 되지 않는다. -->
		<!-- 따라서 resouces 를 인식해주는 작업이 필요하다. java 폴더안의 파일을 모두 resource로 인식하면 안되니 
			단, java파일은 배제시켜준다. -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<warSourceDirectory>webapp</warSourceDirectory>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<!-- 클래스파일 소스볼수있게 다운로드해준다. -->
					<downloadSources>true</downloadSources>
					<wtpversion>2.0</wtpversion>
					<wtpContextName>/</wtpContextName>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<encoding>utf-8</encoding>
				</configuration>
			</plugin>
			<plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>4.0.3</version>
                <configuration>
                    <url>jdbc:h2:~/odark</url>
                    <user>od</user>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.h2database</groupId>
                        <artifactId>h2</artifactId>
                        <version>${h2.database.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
		</plugins>
	</build>
</project>